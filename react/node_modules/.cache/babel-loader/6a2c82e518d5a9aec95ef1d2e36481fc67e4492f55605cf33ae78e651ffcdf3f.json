{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qtkdd\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\wpqkf2_project\\\\test\\\\src\\\\component\\\\auth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [accessToken, setAccessToken] = useState(null); // Access Token\n  const [refreshToken, setRefreshToken] = useState(null); // Refresh Token\n\n  // 컴포넌트가 마운트될 때 localStorage에서 토큰을 읽어옵니다.\n  useEffect(() => {\n    const accessTokenFromStorage = localStorage.getItem('access_token');\n    const refreshTokenFromStorage = localStorage.getItem('refresh_token');\n    if (accessTokenFromStorage) {\n      setAccessToken(accessTokenFromStorage); // localStorage에서 액세스 토큰 가져오기\n    }\n    if (refreshTokenFromStorage) {\n      setRefreshToken(refreshTokenFromStorage); // localStorage에서 리프레시 토큰 가져오기\n    }\n  }, []); // 최초 마운트 시 한 번만 실행\n\n  // accessToken이 변경될 때마다 localStorage에 저장\n  useEffect(() => {\n    if (accessToken) {\n      localStorage.setItem('access_token', accessToken); // Access Token 저장\n    }\n  }, [accessToken]);\n\n  // refreshToken이 변경될 때마다 localStorage에 저장\n  useEffect(() => {\n    if (refreshToken) {\n      localStorage.setItem('refresh_token', refreshToken); // Refresh Token 저장\n    }\n  }, [refreshToken]);\n  const login = async (id, password) => {\n    const response = await fetch('http://localhost:8080/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error('로그인 실패');\n    }\n    const data = await response.json();\n    // 로그인 성공 시 localStorage에 액세스 토큰과 리프레시 토큰 저장\n    setAccessToken(data.accessToken); // 상태 업데이트\n  };\n  const logout = () => {\n    // 상태에서 토큰을 삭제하고, localStorage에서 토큰을 삭제\n    setAccessToken(null);\n    setRefreshToken(null);\n\n    // localStorage에서 토큰 삭제\n    localStorage.removeItem('access_token');\n  };\n  const refreshAccessToken = async () => {\n    if (!refreshToken) {\n      throw new Error('리프레시 토큰이 없습니다.');\n    }\n    const response = await fetch('http://localhost:8080/refresh', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        refreshToken\n      })\n    });\n    if (!response.ok) {\n      throw new Error('리프레시 토큰으로 액세스 토큰을 갱신할 수 없습니다.');\n    }\n    const data = await response.json();\n    // 새로운 액세스 토큰을 상태와 localStorage에 저장\n    setAccessToken(data.accessToken); // 상태 업데이트\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      accessToken,\n      refreshToken,\n      login,\n      logout,\n      refreshAccessToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use Auth Context\n_s(AuthProvider, \"aDDiTOrObdIHOq4wNkxFlTSkLfA=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","accessToken","setAccessToken","refreshToken","setRefreshToken","accessTokenFromStorage","localStorage","getItem","refreshTokenFromStorage","setItem","login","id","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","logout","removeItem","refreshAccessToken","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/qtkdd/OneDrive/바탕 화면/wpqkf2_project/test/src/component/auth.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [accessToken, setAccessToken] = useState(null);  // Access Token\r\n  const [refreshToken, setRefreshToken] = useState(null); // Refresh Token\r\n\r\n  // 컴포넌트가 마운트될 때 localStorage에서 토큰을 읽어옵니다.\r\n  useEffect(() => {\r\n    const accessTokenFromStorage = localStorage.getItem('access_token');\r\n    const refreshTokenFromStorage = localStorage.getItem('refresh_token');\r\n\r\n    if (accessTokenFromStorage) {\r\n      setAccessToken(accessTokenFromStorage);  // localStorage에서 액세스 토큰 가져오기\r\n    }\r\n    if (refreshTokenFromStorage) {\r\n      setRefreshToken(refreshTokenFromStorage); // localStorage에서 리프레시 토큰 가져오기\r\n    }\r\n  }, []);  // 최초 마운트 시 한 번만 실행\r\n\r\n  // accessToken이 변경될 때마다 localStorage에 저장\r\n  useEffect(() => {\r\n    if (accessToken) {\r\n      localStorage.setItem('access_token', accessToken); // Access Token 저장\r\n    }\r\n  }, [accessToken]);\r\n\r\n  // refreshToken이 변경될 때마다 localStorage에 저장\r\n  useEffect(() => {\r\n    if (refreshToken) {\r\n      localStorage.setItem('refresh_token', refreshToken); // Refresh Token 저장\r\n    }\r\n  }, [refreshToken]);\r\n\r\n  const login = async (id, password) => {\r\n    const response = await fetch('http://localhost:8080/login', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ id, password }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('로그인 실패');\r\n    }\r\n\r\n    const data = await response.json();\r\n    // 로그인 성공 시 localStorage에 액세스 토큰과 리프레시 토큰 저장\r\n    setAccessToken(data.accessToken);  // 상태 업데이트\r\n  };\r\n\r\n  const logout = () => {\r\n    // 상태에서 토큰을 삭제하고, localStorage에서 토큰을 삭제\r\n    setAccessToken(null);\r\n    setRefreshToken(null);\r\n\r\n    // localStorage에서 토큰 삭제\r\n    localStorage.removeItem('access_token');\r\n  };\r\n\r\n  const refreshAccessToken = async () => {\r\n    if (!refreshToken) {\r\n      throw new Error('리프레시 토큰이 없습니다.');\r\n    }\r\n\r\n    const response = await fetch('http://localhost:8080/refresh', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ refreshToken }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('리프레시 토큰으로 액세스 토큰을 갱신할 수 없습니다.');\r\n    }\r\n\r\n    const data = await response.json();\r\n    // 새로운 액세스 토큰을 상태와 localStorage에 저장\r\n    setAccessToken(data.accessToken);  // 상태 업데이트\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ accessToken, refreshToken, login, logout, refreshAccessToken }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use Auth Context\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}