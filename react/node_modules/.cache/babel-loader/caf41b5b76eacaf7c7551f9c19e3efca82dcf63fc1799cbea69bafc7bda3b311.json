{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qtkdd\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\wpqkf2_project\\\\test\\\\src\\\\component\\\\auth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [accessToken, setAccessToken] = useState(null); // Access Token 상태\n\n  // 최초 마운트 시, localStorage에서 accessToken을 읽어옵니다.\n  useEffect(() => {\n    const accessTokenFromStorage = localStorage.getItem('access_token');\n    if (accessTokenFromStorage) {\n      setAccessToken(accessTokenFromStorage); // 상태 업데이트\n    }\n  }, []); // 컴포넌트가 마운트될 때만 한 번 실행\n\n  // accessToken이 변경될 때마다 localStorage에 저장\n  useEffect(() => {\n    if (accessToken) {\n      localStorage.setItem('access_token', accessToken); // Access Token을 localStorage에 저장\n    } else {\n      localStorage.removeItem('access_token'); // Token이 없으면 localStorage에서 삭제\n    }\n  }, [accessToken]);\n  const login = async (id, password) => {\n    const response = await fetch('http://localhost:8080/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error('로그인 실패');\n    }\n    const data = await response.json();\n    setAccessToken(data.accessToken); // 로그인 성공 시 상태 업데이트\n    console.log('Login Success:', data.accessToken); // 여기서 확인\n  };\n  const logout = () => {\n    setAccessToken(null); // 상태에서 토큰을 삭제\n    localStorage.removeItem('access_token'); // localStorage에서 토큰 삭제\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      accessToken,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use Auth Context\n_s(AuthProvider, \"FZNZXZJBucKEhoZUIReBwvTXUyo=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","accessToken","setAccessToken","accessTokenFromStorage","localStorage","getItem","setItem","removeItem","login","id","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","console","log","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/qtkdd/OneDrive/바탕 화면/wpqkf2_project/test/src/component/auth.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [accessToken, setAccessToken] = useState(null);  // Access Token 상태\r\n\r\n  // 최초 마운트 시, localStorage에서 accessToken을 읽어옵니다.\r\n  useEffect(() => {\r\n    const accessTokenFromStorage = localStorage.getItem('access_token');\r\n    \r\n    if (accessTokenFromStorage) {\r\n      setAccessToken(accessTokenFromStorage);  // 상태 업데이트\r\n    }\r\n  }, []);  // 컴포넌트가 마운트될 때만 한 번 실행\r\n\r\n  // accessToken이 변경될 때마다 localStorage에 저장\r\n  useEffect(() => {\r\n    if (accessToken) {\r\n      localStorage.setItem('access_token', accessToken);  // Access Token을 localStorage에 저장\r\n    } else {\r\n      localStorage.removeItem('access_token');  // Token이 없으면 localStorage에서 삭제\r\n    }\r\n  }, [accessToken]);\r\n\r\n  const login = async (id, password) => {\r\n    const response = await fetch('http://localhost:8080/login', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ id, password }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('로그인 실패');\r\n    }\r\n\r\n    const data = await response.json();\r\n    setAccessToken(data.accessToken);  // 로그인 성공 시 상태 업데이트\r\n    console.log('Login Success:', data.accessToken); // 여기서 확인\r\n  };\r\n\r\n  const logout = () => {\r\n    setAccessToken(null);  // 상태에서 토큰을 삭제\r\n    localStorage.removeItem('access_token');  // localStorage에서 토큰 삭제\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ accessToken, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use Auth Context\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvE,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;;EAEvD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMS,sBAAsB,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAEnE,IAAIF,sBAAsB,EAAE;MAC1BD,cAAc,CAACC,sBAAsB,CAAC,CAAC,CAAE;IAC3C;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAE;;EAET;EACAT,SAAS,CAAC,MAAM;IACd,IAAIO,WAAW,EAAE;MACfG,YAAY,CAACE,OAAO,CAAC,cAAc,EAAEL,WAAW,CAAC,CAAC,CAAE;IACtD,CAAC,MAAM;MACLG,YAAY,CAACG,UAAU,CAAC,cAAc,CAAC,CAAC,CAAE;IAC5C;EACF,CAAC,EAAE,CAACN,WAAW,CAAC,CAAC;EAEjB,MAAMO,KAAK,GAAG,MAAAA,CAAOC,EAAE,EAAEC,QAAQ,KAAK;IACpC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;MAC1DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,EAAE;QAAEC;MAAS,CAAC;IACvC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,QAAQ,CAAC;IAC3B;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClCnB,cAAc,CAACkB,IAAI,CAACnB,WAAW,CAAC,CAAC,CAAE;IACnCqB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,IAAI,CAACnB,WAAW,CAAC,CAAC,CAAC;EACnD,CAAC;EAED,MAAMuB,MAAM,GAAGA,CAAA,KAAM;IACnBtB,cAAc,CAAC,IAAI,CAAC,CAAC,CAAE;IACvBE,YAAY,CAACG,UAAU,CAAC,cAAc,CAAC,CAAC,CAAE;EAC5C,CAAC;EAED,oBACEX,OAAA,CAACC,WAAW,CAAC4B,QAAQ;IAACC,KAAK,EAAE;MAAEzB,WAAW;MAAEO,KAAK;MAAEgB;IAAO,CAAE;IAAAzB,QAAA,EACzDA;EAAQ;IAAA4B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAA9B,EAAA,CAjDaF,YAAY;AAAAiC,EAAA,GAAZjC,YAAY;AAkDzB,OAAO,MAAMkC,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAOzC,UAAU,CAACK,WAAW,CAAC;AAChC,CAAC;AAACoC,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}