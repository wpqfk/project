{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qtkdd\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\wpqkf2_project\\\\test\\\\src\\\\pages\\\\auth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/utils/auth.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:8080'; // 백엔드 API URL\n\n// 1. AuthContext 생성\nconst AuthContext = /*#__PURE__*/createContext();\n\n// 2. AuthProvider: 로그인/로그아웃 상태를 전역적으로 관리하는 컴포넌트\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [token, setToken] = useState(null); // 로그인 상태를 전역에서 관리\n  const navigate = useNavigate();\n  useEffect(() => {\n    // 페이지 새로고침 시 로컬 저장소에서 토큰을 읽어와 전역 상태에 반영\n    const savedToken = localStorage.getItem('token');\n    if (savedToken) {\n      setToken(savedToken);\n    }\n  }, []);\n\n  // 3. 로그인 함수\n  const login = async (id, password) => {\n    const loginData = {\n      id,\n      password\n    };\n    try {\n      const response = await fetch(`${API_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(loginData),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('로그인 실패');\n      }\n      const data = await response.json();\n      setToken(data.token); // 토큰 저장\n      localStorage.setItem('token', data.token); // 로컬 스토리지에 토큰 저장\n      navigate('/home'); // 로그인 후 홈 페이지로 이동\n    } catch (error) {\n      console.error('로그인 오류 발생:', error);\n      throw error;\n    }\n  };\n\n  // 4. 로그아웃 함수\n  const logout = () => {\n    setToken(null); // 토큰을 지우고\n    localStorage.removeItem('token'); // 로컬 스토리지에서 토큰 삭제\n    navigate('/'); // 로그인 페이지로 리디렉션\n  };\n\n  // 5. 인증 상태 확인\n  const isAuthenticated = () => {\n    return token !== null;\n  };\n\n  // 6. Context로 값 제공\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      login,\n      logout,\n      isAuthenticated\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n// 7. useAuth: Context를 쉽게 사용할 수 있는 커스텀 훅\n_s(AuthProvider, \"kPvFw9wpoiC6lAwrPyKbGLpXbL0=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","API_URL","AuthContext","AuthProvider","children","_s","token","setToken","navigate","savedToken","localStorage","getItem","login","id","password","loginData","response","fetch","method","headers","body","JSON","stringify","credentials","ok","Error","data","json","setItem","error","console","logout","removeItem","isAuthenticated","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/qtkdd/OneDrive/바탕 화면/wpqkf2_project/test/src/pages/auth.js"],"sourcesContent":["// src/utils/auth.js\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst API_URL = 'http://localhost:8080'; // 백엔드 API URL\r\n\r\n// 1. AuthContext 생성\r\nconst AuthContext = createContext();\r\n\r\n// 2. AuthProvider: 로그인/로그아웃 상태를 전역적으로 관리하는 컴포넌트\r\nexport const AuthProvider = ({ children }) => {\r\n  const [token, setToken] = useState(null); // 로그인 상태를 전역에서 관리\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // 페이지 새로고침 시 로컬 저장소에서 토큰을 읽어와 전역 상태에 반영\r\n    const savedToken = localStorage.getItem('token');\r\n    if (savedToken) {\r\n      setToken(savedToken);\r\n    }\r\n  }, []);\r\n\r\n  // 3. 로그인 함수\r\n  const login = async (id, password) => {\r\n    const loginData = { id, password };\r\n\r\n    try {\r\n      const response = await fetch(`${API_URL}/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(loginData),\r\n        credentials: 'include',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('로그인 실패');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setToken(data.token); // 토큰 저장\r\n      localStorage.setItem('token', data.token); // 로컬 스토리지에 토큰 저장\r\n      navigate('/home'); // 로그인 후 홈 페이지로 이동\r\n    } catch (error) {\r\n      console.error('로그인 오류 발생:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 4. 로그아웃 함수\r\n  const logout = () => {\r\n    setToken(null); // 토큰을 지우고\r\n    localStorage.removeItem('token'); // 로컬 스토리지에서 토큰 삭제\r\n    navigate('/'); // 로그인 페이지로 리디렉션\r\n  };\r\n\r\n  // 5. 인증 상태 확인\r\n  const isAuthenticated = () => {\r\n    return token !== null;\r\n  };\r\n\r\n  // 6. Context로 값 제공\r\n  return (\r\n    <AuthContext.Provider value={{ token, login, logout, isAuthenticated }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// 7. useAuth: Context를 쉽게 사용할 수 있는 커스텀 훅\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,OAAO,GAAG,uBAAuB,CAAC,CAAC;;AAEzC;AACA,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMS,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1C,MAAMY,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,IAAIF,UAAU,EAAE;MACdF,QAAQ,CAACE,UAAU,CAAC;IACtB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,KAAK,GAAG,MAAAA,CAAOC,EAAE,EAAEC,QAAQ,KAAK;IACpC,MAAMC,SAAS,GAAG;MAAEF,EAAE;MAAEC;IAAS,CAAC;IAElC,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGhB,OAAO,QAAQ,EAAE;QAC/CiB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,SAAS,CAAC;QAC/BQ,WAAW,EAAE;MACf,CAAC,CAAC;MAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,QAAQ,CAAC;MAC3B;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClCpB,QAAQ,CAACmB,IAAI,CAACpB,KAAK,CAAC,CAAC,CAAC;MACtBI,YAAY,CAACkB,OAAO,CAAC,OAAO,EAAEF,IAAI,CAACpB,KAAK,CAAC,CAAC,CAAC;MAC3CE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,OAAOqB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClC,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAME,MAAM,GAAGA,CAAA,KAAM;IACnBxB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IAChBG,YAAY,CAACsB,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;IAClCxB,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;EACjB,CAAC;;EAED;EACA,MAAMyB,eAAe,GAAGA,CAAA,KAAM;IAC5B,OAAO3B,KAAK,KAAK,IAAI;EACvB,CAAC;;EAED;EACA,oBACEN,OAAA,CAACE,WAAW,CAACgC,QAAQ;IAACC,KAAK,EAAE;MAAE7B,KAAK;MAAEM,KAAK;MAAEmB,MAAM;MAAEE;IAAgB,CAAE;IAAA7B,QAAA,EACpEA;EAAQ;IAAAgC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAlC,EAAA,CA5DaF,YAAY;EAAA,QAENL,WAAW;AAAA;AAAA0C,EAAA,GAFjBrC,YAAY;AA6DzB,OAAO,MAAMsC,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAO/C,UAAU,CAACO,WAAW,CAAC;AAChC,CAAC;AAACwC,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}