{"ast":null,"code":"// auth.js\n\nconst API_URL = 'http://localhost:8080'; // API URL (백엔드 서버)\n\nexport const login = async (id, password) => {\n  const loginData = {\n    id,\n    password\n  };\n  try {\n    const response = await fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(loginData),\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      throw new Error('로그인 실패');\n    }\n    const data = await response.json();\n    // 로그인 성공 시 JWT 토큰을 로컬 스토리지에 저장\n    localStorage.setItem('token', data.token);\n    return data;\n  } catch (error) {\n    console.error('로그인 오류 발생:', error);\n    throw error;\n  }\n};\n\n// 로그인 상태 확인\nexport const isAuthenticated = () => {\n  return localStorage.getItem('token') !== null;\n};\n\n// 로그아웃\nexport const logout = () => {\n  // 로컬 스토리지에서 JWT 토큰 삭제\n  localStorage.removeItem('token');\n\n  // 서버 세션 종료 요청 (필요하면 서버에도 로그아웃 요청)\n  fetch(`${API_URL}/logout`, {\n    method: 'POST',\n    credentials: 'include'\n  }).then(response => {\n    if (response.ok) {\n      console.log('로그아웃 성공');\n    }\n  }).catch(error => {\n    console.error('로그아웃 오류:', error);\n  });\n};\n\n// 토큰을 서버에서 검증하기 위해 사용하는 함수\nexport const verifyToken = async () => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    throw new Error('로그인되지 않음');\n  }\n  try {\n    const response = await fetch(`${API_URL}/protected`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      },\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      throw new Error('유효하지 않은 토큰');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('토큰 검증 오류:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","login","id","password","loginData","response","fetch","method","headers","body","JSON","stringify","credentials","ok","Error","data","json","localStorage","setItem","token","error","console","isAuthenticated","getItem","logout","removeItem","then","log","catch","verifyToken"],"sources":["C:/Users/qtkdd/OneDrive/바탕 화면/wpqkf2_project/test/src/pages/auth.js"],"sourcesContent":["// auth.js\r\n\r\nconst API_URL = 'http://localhost:8080';  // API URL (백엔드 서버)\r\n\r\nexport const login = async (id, password) => {\r\n  const loginData = { id, password };\r\n\r\n  try {\r\n    const response = await fetch(`${API_URL}/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(loginData),\r\n      credentials: 'include',\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('로그인 실패');\r\n    }\r\n\r\n    const data = await response.json();\r\n    // 로그인 성공 시 JWT 토큰을 로컬 스토리지에 저장\r\n    localStorage.setItem('token', data.token);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('로그인 오류 발생:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 로그인 상태 확인\r\nexport const isAuthenticated = () => {\r\n  return localStorage.getItem('token') !== null;\r\n};\r\n\r\n// 로그아웃\r\nexport const logout = () => {\r\n  // 로컬 스토리지에서 JWT 토큰 삭제\r\n  localStorage.removeItem('token');\r\n\r\n  // 서버 세션 종료 요청 (필요하면 서버에도 로그아웃 요청)\r\n  fetch(`${API_URL}/logout`, {\r\n    method: 'POST',\r\n    credentials: 'include',\r\n  })\r\n    .then((response) => {\r\n      if (response.ok) {\r\n        console.log('로그아웃 성공');\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error('로그아웃 오류:', error);\r\n    });\r\n};\r\n\r\n// 토큰을 서버에서 검증하기 위해 사용하는 함수\r\nexport const verifyToken = async () => {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) {\r\n    throw new Error('로그인되지 않음');\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(`${API_URL}/protected`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n      },\r\n      credentials: 'include',\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('유효하지 않은 토큰');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('토큰 검증 오류:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAG,uBAAuB,CAAC,CAAE;;AAE1C,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,EAAE,EAAEC,QAAQ,KAAK;EAC3C,MAAMC,SAAS,GAAG;IAAEF,EAAE;IAAEC;EAAS,CAAC;EAElC,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,QAAQ,EAAE;MAC/CO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,SAAS,CAAC;MAC/BQ,WAAW,EAAE;IACf,CAAC,CAAC;IAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,QAAQ,CAAC;IAC3B;IAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClC;IACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC;IACzC,OAAOJ,IAAI;EACb,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IAClC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,eAAe,GAAGA,CAAA,KAAM;EACnC,OAAOL,YAAY,CAACM,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI;AAC/C,CAAC;;AAED;AACA,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAC1B;EACAP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;;EAEhC;EACAnB,KAAK,CAAC,GAAGN,OAAO,SAAS,EAAE;IACzBO,MAAM,EAAE,MAAM;IACdK,WAAW,EAAE;EACf,CAAC,CAAC,CACCc,IAAI,CAAErB,QAAQ,IAAK;IAClB,IAAIA,QAAQ,CAACQ,EAAE,EAAE;MACfQ,OAAO,CAACM,GAAG,CAAC,SAAS,CAAC;IACxB;EACF,CAAC,CAAC,CACDC,KAAK,CAAER,KAAK,IAAK;IAChBC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;EAClC,CAAC,CAAC;AACN,CAAC;;AAED;AACA,OAAO,MAAMS,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,MAAMV,KAAK,GAAGF,YAAY,CAACM,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACJ,KAAK,EAAE;IACV,MAAM,IAAIL,KAAK,CAAC,UAAU,CAAC;EAC7B;EAEA,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,YAAY,EAAE;MACnDO,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,eAAe,EAAE,UAAUW,KAAK;MAClC,CAAC;MACDP,WAAW,EAAE;IACf,CAAC,CAAC;IAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,YAAY,CAAC;IAC/B;IAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjC,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}