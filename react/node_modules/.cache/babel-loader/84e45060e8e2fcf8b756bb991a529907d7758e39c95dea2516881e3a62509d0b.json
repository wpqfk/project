{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qtkdd\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\project\\\\react\\\\src\\\\component\\\\auth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [accessToken, setAccessToken] = useState(null); // Access Token 상태\n  const [loading, setLoading] = useState(true); // 로딩 상태 관리\n\n  // 최초 마운트 시, localStorage에서 accessToken을 읽어옵니다.\n  useEffect(() => {\n    const accessTokenFromStorage = localStorage.getItem('access_token');\n    if (accessTokenFromStorage) {\n      setAccessToken(accessTokenFromStorage); // 상태 업데이트\n    }\n    setLoading(false); // 로딩 상태를 false로 변경하여 렌더링을 완료합니다.\n  }, []); // 컴포넌트가 마운트될 때만 한 번 실행\n\n  // accessToken이 변경될 때마다 localStorage에 저장\n  useEffect(() => {\n    if (accessToken) {\n      localStorage.setItem('access_token', accessToken); // Access Token을 localStorage에 저장\n    } else {\n      localStorage.removeItem('access_token'); // Token이 없으면 localStorage에서 삭제\n    }\n  }, [accessToken]);\n  const login = async (id, password) => {\n    try {\n      const response = await fetch('http://localhost:8080/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id,\n          password\n        })\n      });\n      if (!response.ok) {\n        throw new Error('로그인 실패');\n      }\n      const data = await response.json();\n      setAccessToken(data.accessToken); // 로그인 성공 시 상태 업데이트\n      console.log('Login Success:', data.accessToken); // 여기서 확인\n    } catch (error) {\n      console.error('Login Error:', error.message);\n      throw error; // 오류를 상위 컴포넌트로 전달하거나 적절히 처리\n    }\n  };\n  const logout = () => {\n    setAccessToken(null); // 상태에서 토큰을 삭제\n    localStorage.removeItem('access_token'); // localStorage에서 토큰 삭제\n  };\n\n  // 로딩 중일 때는 컴포넌트를 렌더링하지 않음 (로딩 상태가 끝날 때까지)\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uB85C\\uB529 \\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      accessToken,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use Auth Context\n_s(AuthProvider, \"UOIHoSdU+XKL2W9nTBzHVZPGLpQ=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","accessToken","setAccessToken","loading","setLoading","accessTokenFromStorage","localStorage","getItem","setItem","removeItem","login","id","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","console","log","error","message","logout","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/qtkdd/OneDrive/바탕 화면/project/react/src/component/auth.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [accessToken, setAccessToken] = useState(null);  // Access Token 상태\r\n  const [loading, setLoading] = useState(true);  // 로딩 상태 관리\r\n\r\n  // 최초 마운트 시, localStorage에서 accessToken을 읽어옵니다.\r\n  useEffect(() => {\r\n    const accessTokenFromStorage = localStorage.getItem('access_token');\r\n    \r\n    if (accessTokenFromStorage) {\r\n      setAccessToken(accessTokenFromStorage);  // 상태 업데이트\r\n    }\r\n    \r\n    setLoading(false);  // 로딩 상태를 false로 변경하여 렌더링을 완료합니다.\r\n  }, []);  // 컴포넌트가 마운트될 때만 한 번 실행\r\n\r\n  // accessToken이 변경될 때마다 localStorage에 저장\r\n  useEffect(() => {\r\n    if (accessToken) {\r\n      localStorage.setItem('access_token', accessToken);  // Access Token을 localStorage에 저장\r\n    } else {\r\n      localStorage.removeItem('access_token');  // Token이 없으면 localStorage에서 삭제\r\n    }\r\n  }, [accessToken]);\r\n\r\n  const login = async (id, password) => {\r\n    try {\r\n      const response = await fetch('http://localhost:8080/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ id, password }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('로그인 실패');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setAccessToken(data.accessToken);  // 로그인 성공 시 상태 업데이트\r\n      console.log('Login Success:', data.accessToken); // 여기서 확인\r\n    } catch (error) {\r\n      console.error('Login Error:', error.message);\r\n      throw error;  // 오류를 상위 컴포넌트로 전달하거나 적절히 처리\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setAccessToken(null);  // 상태에서 토큰을 삭제\r\n    localStorage.removeItem('access_token');  // localStorage에서 토큰 삭제\r\n  };\r\n\r\n  // 로딩 중일 때는 컴포넌트를 렌더링하지 않음 (로딩 상태가 끝날 때까지)\r\n  if (loading) {\r\n    return <div>로딩 중...</div>;\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ accessToken, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use Auth Context\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}