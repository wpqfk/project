{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qtkdd\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\wpqkf2_project\\\\test\\\\src\\\\component\\\\auth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [token, setToken] = useState(null);\n\n  // 컴포넌트가 마운트될 때 쿠키에서 토큰을 읽어옵니다.\n  useEffect(() => {\n    // 페이지 로드 시 쿠키에서 토큰을 읽어와 상태에 설정\n    const tokenFromCookies = document.cookie.split('; ').find(row => row.startsWith('auth_token='));\n    if (tokenFromCookies) {\n      setToken(tokenFromCookies.split('=')[1]); // 쿠키에서 토큰을 가져와 상태에 설정\n    }\n  }, []); // 최초 마운트 시 한 번만 실행\n\n  const login = async (id, password) => {\n    const response = await fetch('http://localhost:8080/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id,\n        password\n      }),\n      credentials: 'include' // 쿠키를 자동으로 포함시킴\n    });\n    if (!response.ok) {\n      throw new Error('로그인 실패');\n    }\n    const data = await response.json();\n    // 로그인 성공 시 쿠키에 토큰 저장\n    document.cookie = `auth_token=${data.token}; path=/; max-age=3600`; // 쿠키에 토큰 저장\n    setToken(data.token); // 상태 업데이트\n  };\n  const logout = () => {\n    // 상태에서 토큰을 삭제하고, 쿠키에서 토큰을 삭제\n    setToken(null);\n    document.cookie = 'auth_token=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/'; // 쿠키에서 삭제\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use Auth Context\n_s(AuthProvider, \"SSLzquenZQzOMzU62DrezfOo2pU=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","token","setToken","tokenFromCookies","document","cookie","split","find","row","startsWith","login","id","password","response","fetch","method","headers","body","JSON","stringify","credentials","ok","Error","data","json","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/qtkdd/OneDrive/바탕 화면/wpqkf2_project/test/src/component/auth.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [token, setToken] = useState(null);\r\n\r\n  // 컴포넌트가 마운트될 때 쿠키에서 토큰을 읽어옵니다.\r\n  useEffect(() => {\r\n    // 페이지 로드 시 쿠키에서 토큰을 읽어와 상태에 설정\r\n    const tokenFromCookies = document.cookie.split('; ').find(row => row.startsWith('auth_token='));\r\n    if (tokenFromCookies) {\r\n      setToken(tokenFromCookies.split('=')[1]);  // 쿠키에서 토큰을 가져와 상태에 설정\r\n    }\r\n  }, []);  // 최초 마운트 시 한 번만 실행\r\n\r\n  const login = async (id, password) => {\r\n    const response = await fetch('http://localhost:8080/login', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ id, password }),\r\n      credentials: 'include',  // 쿠키를 자동으로 포함시킴\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('로그인 실패');\r\n    }\r\n\r\n    const data = await response.json();\r\n    // 로그인 성공 시 쿠키에 토큰 저장\r\n    document.cookie = `auth_token=${data.token}; path=/; max-age=3600`;  // 쿠키에 토큰 저장\r\n    setToken(data.token);  // 상태 업데이트\r\n  };\r\n\r\n  const logout = () => {\r\n    // 상태에서 토큰을 삭제하고, 쿠키에서 토큰을 삭제\r\n    setToken(null);\r\n    document.cookie = 'auth_token=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/';  // 쿠키에서 삭제\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ token, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use Auth Context\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvE,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,gBAAgB,GAAGC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,UAAU,CAAC,aAAa,CAAC,CAAC;IAC/F,IAAIN,gBAAgB,EAAE;MACpBD,QAAQ,CAACC,gBAAgB,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;IAC7C;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAE;;EAET,MAAMI,KAAK,GAAG,MAAAA,CAAOC,EAAE,EAAEC,QAAQ,KAAK;IACpC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;MAC1DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,EAAE;QAAEC;MAAS,CAAC,CAAC;MACtCQ,WAAW,EAAE,SAAS,CAAG;IAC3B,CAAC,CAAC;IAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,QAAQ,CAAC;IAC3B;IAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClC;IACApB,QAAQ,CAACC,MAAM,GAAG,cAAckB,IAAI,CAACtB,KAAK,wBAAwB,CAAC,CAAE;IACrEC,QAAQ,CAACqB,IAAI,CAACtB,KAAK,CAAC,CAAC,CAAE;EACzB,CAAC;EAED,MAAMwB,MAAM,GAAGA,CAAA,KAAM;IACnB;IACAvB,QAAQ,CAAC,IAAI,CAAC;IACdE,QAAQ,CAACC,MAAM,GAAG,4DAA4D,CAAC,CAAE;EACnF,CAAC;EAED,oBACET,OAAA,CAACC,WAAW,CAAC6B,QAAQ;IAACC,KAAK,EAAE;MAAE1B,KAAK;MAAES,KAAK;MAAEe;IAAO,CAAE;IAAA1B,QAAA,EACnDA;EAAQ;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAA/B,EAAA,CA3CaF,YAAY;AAAAkC,EAAA,GAAZlC,YAAY;AA4CzB,OAAO,MAAMmC,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAO1C,UAAU,CAACK,WAAW,CAAC;AAChC,CAAC;AAACqC,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}