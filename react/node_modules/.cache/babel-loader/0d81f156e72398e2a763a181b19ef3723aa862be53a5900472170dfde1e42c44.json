{"ast":null,"code":"const API_URL = 'http://localhost:8080'; // API URL (백엔드 서버)\n\n// 로그인 함수\nexport const login = async (id, password) => {\n  const loginData = {\n    id,\n    password\n  };\n  try {\n    // 로그인 API 호출\n    const response = await fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(loginData),\n      credentials: 'include' // 쿠키 포함하여 요청\n    });\n    if (!response.ok) {\n      throw new Error('로그인 실패');\n    }\n    const data = await response.json();\n    // 로그인 성공 시 JWT 토큰을 로컬 스토리지에 저장\n    localStorage.setItem('token', data.token);\n    return data; // 데이터 반환 (토큰 포함)\n  } catch (error) {\n    console.error('로그인 오류 발생:', error);\n    throw error; // 에러 발생 시 throw\n  }\n};\n\n// 로그인 상태 확인 함수\nexport const isAuthenticated = () => {\n  // 로컬 스토리지에서 토큰을 가져와서 유효한지 확인\n  return localStorage.getItem('token') !== null;\n};\n\n// 로그아웃 함수\nexport const logout = async () => {\n  // 로컬 스토리지에서 JWT 토큰 삭제\n  localStorage.removeItem('token');\n  try {\n    // 서버에서 세션 종료 요청 (옵션)\n    const response = await fetch(`${API_URL}/logout`, {\n      method: 'POST',\n      credentials: 'include' // 쿠키 포함\n    });\n    if (!response.ok) {\n      throw new Error('로그아웃 실패');\n    }\n    console.log('로그아웃 성공');\n  } catch (error) {\n    console.error('로그아웃 오류:', error);\n  }\n};\n\n// 보호된 리소스 요청 (인증된 사용자만 접근 가능)\nexport const fetchProtectedData = async () => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    throw new Error('로그인되지 않음');\n  }\n  try {\n    // 보호된 리소스 요청 (JWT 포함)\n    const response = await fetch(`${API_URL}/protected`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}` // Bearer 방식으로 토큰을 전달\n      },\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      throw new Error('인증되지 않은 요청');\n    }\n    return await response.json(); // 서버에서 반환한 데이터\n  } catch (error) {\n    console.error('보호된 리소스 요청 오류:', error);\n    throw error; // 에러 발생 시 throw\n  }\n};","map":{"version":3,"names":["API_URL","login","id","password","loginData","response","fetch","method","headers","body","JSON","stringify","credentials","ok","Error","data","json","localStorage","setItem","token","error","console","isAuthenticated","getItem","logout","removeItem","log","fetchProtectedData"],"sources":["C:/Users/qtkdd/OneDrive/바탕 화면/wpqkf2_project/test/src/pages/auth.js"],"sourcesContent":["const API_URL = 'http://localhost:8080'; // API URL (백엔드 서버)\r\n\r\n\r\n// 로그인 함수\r\nexport const login = async (id, password) => {\r\n  const loginData = { id, password };\r\n\r\n  try {\r\n    // 로그인 API 호출\r\n    const response = await fetch(`${API_URL}/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(loginData),\r\n      credentials: 'include',  // 쿠키 포함하여 요청\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('로그인 실패');\r\n    }\r\n\r\n    const data = await response.json();\r\n    // 로그인 성공 시 JWT 토큰을 로컬 스토리지에 저장\r\n    localStorage.setItem('token', data.token);\r\n    return data; // 데이터 반환 (토큰 포함)\r\n  } catch (error) {\r\n    console.error('로그인 오류 발생:', error);\r\n    throw error;  // 에러 발생 시 throw\r\n  }\r\n};\r\n\r\n\r\n// 로그인 상태 확인 함수\r\nexport const isAuthenticated = () => {\r\n  // 로컬 스토리지에서 토큰을 가져와서 유효한지 확인\r\n  return localStorage.getItem('token') !== null;\r\n};\r\n\r\n\r\n// 로그아웃 함수\r\nexport const logout = async () => {\r\n  // 로컬 스토리지에서 JWT 토큰 삭제\r\n  localStorage.removeItem('token');\r\n\r\n  try {\r\n    // 서버에서 세션 종료 요청 (옵션)\r\n    const response = await fetch(`${API_URL}/logout`, {\r\n      method: 'POST',\r\n      credentials: 'include',  // 쿠키 포함\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('로그아웃 실패');\r\n    }\r\n\r\n    console.log('로그아웃 성공');\r\n  } catch (error) {\r\n    console.error('로그아웃 오류:', error);\r\n  }\r\n};\r\n\r\n\r\n// 보호된 리소스 요청 (인증된 사용자만 접근 가능)\r\nexport const fetchProtectedData = async () => {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) {\r\n    throw new Error('로그인되지 않음');\r\n  }\r\n\r\n  try {\r\n    // 보호된 리소스 요청 (JWT 포함)\r\n    const response = await fetch(`${API_URL}/protected`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,  // Bearer 방식으로 토큰을 전달\r\n      },\r\n      credentials: 'include',\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('인증되지 않은 요청');\r\n    }\r\n\r\n    return await response.json();  // 서버에서 반환한 데이터\r\n  } catch (error) {\r\n    console.error('보호된 리소스 요청 오류:', error);\r\n    throw error;  // 에러 발생 시 throw\r\n  }\r\n};\r\n\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,uBAAuB,CAAC,CAAC;;AAGzC;AACA,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,EAAE,EAAEC,QAAQ,KAAK;EAC3C,MAAMC,SAAS,GAAG;IAAEF,EAAE;IAAEC;EAAS,CAAC;EAElC,IAAI;IACF;IACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,QAAQ,EAAE;MAC/CO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,SAAS,CAAC;MAC/BQ,WAAW,EAAE,SAAS,CAAG;IAC3B,CAAC,CAAC;IAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,QAAQ,CAAC;IAC3B;IAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClC;IACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC;IACzC,OAAOJ,IAAI,CAAC,CAAC;EACf,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IAClC,MAAMA,KAAK,CAAC,CAAE;EAChB;AACF,CAAC;;AAGD;AACA,OAAO,MAAME,eAAe,GAAGA,CAAA,KAAM;EACnC;EACA,OAAOL,YAAY,CAACM,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI;AAC/C,CAAC;;AAGD;AACA,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAAY;EAChC;EACAP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;EAEhC,IAAI;IACF;IACA,MAAMpB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,SAAS,EAAE;MAChDO,MAAM,EAAE,MAAM;MACdK,WAAW,EAAE,SAAS,CAAG;IAC3B,CAAC,CAAC;IAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,SAAS,CAAC;IAC5B;IAEAO,OAAO,CAACK,GAAG,CAAC,SAAS,CAAC;EACxB,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;EAClC;AACF,CAAC;;AAGD;AACA,OAAO,MAAMO,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,MAAMR,KAAK,GAAGF,YAAY,CAACM,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACJ,KAAK,EAAE;IACV,MAAM,IAAIL,KAAK,CAAC,UAAU,CAAC;EAC7B;EAEA,IAAI;IACF;IACA,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,YAAY,EAAE;MACnDO,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,eAAe,EAAE,UAAUW,KAAK,EAAE,CAAG;MACvC,CAAC;MACDP,WAAW,EAAE;IACf,CAAC,CAAC;IAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,YAAY,CAAC;IAC/B;IAEA,OAAO,MAAMT,QAAQ,CAACW,IAAI,CAAC,CAAC,CAAC,CAAE;EACjC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,MAAMA,KAAK,CAAC,CAAE;EAChB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}